#r Roche.LAMA1.dll

/*
Script written by Ronen Peleg (ronenpeleg@biosero.com)

Description:
Process any requests to cancel either the entire order or a job within it. 
Process error messages or the entire workflow processing accordingly
*/

using Biosero.DataServices.Client;
using Biosero.Orchestrator.WorkflowService;
using Newtonsoft.Json;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Roche.LAMA1;
using Roche.LAMA1.Models;
using Roche.LAMA1.MosaicTypes;
using Biosero.DataServices.RestClient;
using Biosero.DataModels.Events;
using Biosero.DataModels.Ordering;
using Biosero.DataModels.Clients;
using Biosero.DataModels.Resources;
using System.Security.Cryptography;
using System.Collections;


namespace Biosero.Scripting
{
    public class CheckCancelledJobsAndOrders
    {
        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)
        {
            string RequestedOrder = context.GetGlobalVariableValue<string>("Input.OrderId");
           // string API_BASE_URL = "http://192.168.14.10:8105/api/v2.0/";
            string API_BASE_URL =  context.GetGlobalVariableValue<string>("_url"); // "http://1 92.168.14.10:8105/api/v2.0/";
            
            IQueryClient _queryClient = new QueryClient(API_BASE_URL);
            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);
            IEventClient _eventClient = new EventClient(API_BASE_URL);


            IdentityHelper _identityHelper;


            //Build out and register the root identities (i.e Mosaic Job) if they do not exist
            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);
            _identityHelper.BuildBaseIdentities();

            List<string> ReadyCPSources = new List<string>();
            List<string> CancelledCPSources = new List<string>();
            List<string> ReadyRepSources = new List<string>();
            List<string> CancelledRepSources = new List<string>();
            List<string> ReadyJobs = new List<string>();
            List<string> CancelledJobs = new List<string>();


            //Get all the sources associated with this order
            var sources = _identityHelper.GetSources(RequestedOrder).ToList();

            //Get all the destinations associated with this order
            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();
            //Get all the jobs
            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();



            var orders = await client.GetOrdersAsync();

            string firstorderId = RequestedOrder;
            orders = orders
                .Where(x => x.StatusDetails == "Running..." && x.TemplateName == "State Machine V1.1")
                .OrderBy(x => x.CreationTime)  // Replace OrderNumber with the actual numeric property
                .ToArray();

            var firstOrder = orders.FirstOrDefault();

            if (firstOrder != null)
            {

                var firstorderIdentifier = firstOrder.InputParameters;


                var d = firstorderIdentifier
                .Where(x => x.Name == "OrderId")
                .FirstOrDefault();


                if (d != null)
                {
                    firstorderId = d.Value.ToString();


                }
            }
            else
            {
                firstorderId = RequestedOrder;

                

            }

            var firstordersources = _identityHelper.GetSources(firstorderId).ToList();
            Console.WriteLine($"the first order is {firstorderId}" + Environment.NewLine);

            foreach (var source in sources)
            {
                string SourceIdentityID = source.Identifier;
                string SourceIdentityName = source.Name;
                string SourceIdentityType = source.TypeIdentifier;
                string SourceIndentityState = source.Status.ToString();
                string SourceJobId = source.JobId.ToString();
                string SourceOperationType = source.OperationType.ToString();

                string SourceParent;

                bool containsCurrentSource = firstordersources.Any(x => x.Name == SourceIdentityName);


                if (source.ParentIdentifier != null)
                {
                    SourceParent = source.ParentIdentifier.ToString();
                }
                else
                {
                    SourceParent = "";
                }

                Console.WriteLine($"***********    {SourceJobId} currently has a state of {SourceIndentityState}  for order Id {RequestedOrder} " + Environment.NewLine);



                if (SourceOperationType == "CherryPick")
                {
                    if ((SourceIndentityState == "Ready" || SourceIndentityState == "Validating") && (!ReadyJobs.Contains(SourceJobId)) && ((RequestedOrder == firstorderId) && (containsCurrentSource)))
                    {
                        Console.WriteLine($"***********    {SourceJobId} with state {SourceIndentityState} was added to ready jobs for order Id {RequestedOrder} " + Environment.NewLine);

                        ReadyJobs.Add(SourceJobId);
                    }
                    else if ((SourceIndentityState == "Cancelled") && (!CancelledJobs.Contains(SourceJobId)))
                    {
                        CancelledJobs.Add(SourceJobId);
                    }


                    if ((SourceIndentityState == "Ready" || SourceIndentityState == "Validating") && (!ReadyCPSources.Contains(SourceIdentityName)) && ((RequestedOrder== firstorderId) && (containsCurrentSource)))
                    {
                        ReadyCPSources.Add(SourceIdentityName);
                    }
                    else if ((SourceIndentityState == "Cancelled") && (!CancelledCPSources.Contains(SourceIdentityName)))
                    {
                        CancelledCPSources.Add(SourceIdentityName);
                    }

                }

                else if ((SourceOperationType == "Replicate") && (SourceParent == ""))
                {
                    if ((SourceIndentityState == "Ready" || SourceIndentityState == "Validating") && (!ReadyJobs.Contains(SourceJobId)))
                    {
                        ReadyJobs.Add(SourceJobId);
                    }
                    else if ((SourceIndentityState == "Cancelled") && (!CancelledJobs.Contains(SourceJobId)))
                    {
                        CancelledJobs.Add(SourceJobId);
                    }


                    if ((SourceIndentityState == "Ready" || SourceIndentityState == "Validating") && (!ReadyRepSources.Contains(SourceIdentityName)))
                    {
                        ReadyRepSources.Add(SourceIdentityName);
                    }
                    else if ((SourceIndentityState == "Cancelled") && (!CancelledRepSources.Contains(SourceIdentityName)))
                    {
                        CancelledRepSources.Add(SourceIdentityName);
                    }

                }
            }

            var uniqueInList = CancelledJobs.Where(item => !ReadyJobs.Contains(item)).ToList();

            var jobIDs = jobs.Select(job => job.JobId).ToList();

            string AllReadyCPSources = string.Join(",", ReadyCPSources);
            string AllCancelledCPSources = string.Join(",", CancelledCPSources);
            string AllReadyRepSources = string.Join(",", ReadyRepSources);
            string AllCancelledRepSources = string.Join(",", CancelledRepSources);
            string AllReadyJobs = string.Join(",", ReadyJobs);
            string AllCancelledJobs = string.Join(",", CancelledJobs);
            string OnlyCancelledJobs = string.Join(",", uniqueInList);
            string AllJobs = string.Join(",", jobIDs);

            bool CancelOrder = false;

            bool allInList2 = AllJobs.All(x => OnlyCancelledJobs.Contains(x));

            if (allInList2 == true)
            {
                CancelOrder = true;
            }

            Console.WriteLine($"***********   All Ready CP Sources= {AllReadyCPSources}  for Order {RequestedOrder} " + Environment.NewLine);

            Serilog.Log.Information("All Ready CP Sources= {AllReadyCPSources}", AllReadyCPSources.ToString());
            Serilog.Log.Information("AllCancelledCPSources= {AllCancelledCPSources}", AllCancelledCPSources.ToString());
            Serilog.Log.Information("AllReadyRepSources= {AllReadyRepSources}", AllReadyRepSources.ToString());
            Serilog.Log.Information("AllCancelledRepSources= {AllCancelledRepSources}", AllCancelledRepSources.ToString());
            Serilog.Log.Information("AllReadyJobs= {AllReadyJobs}", AllReadyJobs.ToString());
            Serilog.Log.Information("AllCancelledJobs= {AllCancelledJobs}", AllCancelledJobs.ToString());
            Serilog.Log.Information("OnlyCancelledJobs= {OnlyCancelledJobs}", OnlyCancelledJobs.ToString());
            Serilog.Log.Information("AllJobs= {AllJobs}", AllJobs.ToString());


            await context.AddOrUpdateGlobalVariableAsync("All Ready Jobs", AllReadyJobs);
            await context.AddOrUpdateGlobalVariableAsync("Cancel Order Processing", CancelOrder);
            await context.AddOrUpdateGlobalVariableAsync("IOC Processed Racks", AllReadyCPSources);
            await context.AddOrUpdateGlobalVariableAsync("IOC Processed Crash Plates", AllReadyRepSources);

        }

    }
}


