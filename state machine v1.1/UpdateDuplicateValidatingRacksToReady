#r Roche.LAMA1.dll


/*
Script written by Ronen Peleg (ronenpeleg@biosero.com)

Description:
Initial script to determine the type of order jobs required to be processed and their contents.
The script also populates various required variables in dataservices in down the line processes
*/




using Biosero.DataServices.Client;
using Biosero.Orchestrator.WorkflowService;
using Newtonsoft.Json;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Roche.LAMA1;
using Roche.LAMA1.Models;
using Roche.LAMA1.MosaicTypes;
using Biosero.DataServices.RestClient;
using Biosero.DataModels.Events;
using Biosero.DataModels.Ordering;
using Biosero.DataModels.Clients;
using Biosero.DataModels.Resources;
using System.Security.Cryptography;
using System.Collections;
using System.Numerics;


namespace Biosero.Scripting
{
    public class UpdateDuplicateValidatingRacksToReady
    {
        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)
        {
            string RequestedOrder = context.GetGlobalVariableValue<string>("Input.OrderId");
            string QueuedSources = context.GetGlobalVariableValue<string>("Queued Sources");

            await context.AddOrUpdateGlobalVariableAsync("REMPOnToBeDone", true);

            string firstorderId = RequestedOrder;

            var orders = await client.GetOrdersAsync();

            orders = orders.Where(x => x.StatusDetails == "Running..." && x.TemplateName == "State Machine V1.1").ToArray();

            var firstOrder = orders.FirstOrDefault();

            if (firstOrder != null)
            {

                var firstorderIdentifier = firstOrder.InputParameters;


                var d = firstorderIdentifier
                .Where(x => x.Name == "OrderId")
                .FirstOrDefault();


                if (d != null)
                {
                    firstorderId = d.Value.ToString();
                }
            }
            else
            {
                firstorderId = RequestedOrder;

            }


            // connnect to the DS server, declare query, assecssioning and event clients for the URL
           // string API_BASE_URL = "http://192.168.14.10:8105/api/v2.0/";
            string API_BASE_URL =  context.GetGlobalVariableValue<string>("_url"); // "http://1 92.168.14.10:8105/api/v2.0/";
            
            
            IQueryClient _queryClient = new QueryClient(API_BASE_URL);
            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);
            IEventClient _eventClient = new EventClient(API_BASE_URL);

            IdentityHelper _identityHelper;

            //Build out and register the root identities (i.e Mosaic Job) if they do not exist
            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);
            _identityHelper.BuildBaseIdentities();

            //Get all the sources associated with this order
            var sources = _identityHelper.GetSources(RequestedOrder).ToList();
            //Get all the Sources associated with this order
            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();
            //Get all the jobs
            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();

            foreach (var transportorder in orders)
            {

                string TransportOrderId = transportorder.Identifier;

                foreach (var param1 in transportorder.InputParameters)
                {
                    if (param1.Name == "OrderId")
                    {
                        string orderIdValue = param1.Value.ToString();
                        var innersources = _identityHelper.GetSources(orderIdValue).ToList();


                        var d = innersources
                        .Where(x => x.Name == QueuedSources)
                        .FirstOrDefault();

                        var c = sources
                        .Where(x => x.Name == QueuedSources)
                        .FirstOrDefault();


                        if ((c !=null) && (d != null))
                        {

                            string OrderinnersourcesStatus = d.Status.ToString();
                            string OrderinnersourcesName = d.Name;
                            string RequestinnersourcesStatus = c.Status.ToString();
                            string RequestinnersourcesName = c.Name;
                            int RequestJob = c.JobId;

                            if ((orderIdValue != RequestedOrder) && (OrderinnersourcesStatus == "Ready") && (RequestinnersourcesStatus=="Validating"))
                            {
                                c.Properties.SetValue("Status", "Ready");
                                _identityHelper.Register(c, RequestJob, RequestedOrder);

                                Console.WriteLine($"  updated the status for  {RequestinnersourcesName} on order {RequestedOrder} from Validating to Ready   " + Environment.NewLine);

                            }
                        }
                    }
                }
            }


        }
    }
}


