


/*
Script written by Ronen Peleg (ronenpeleg@biosero.com)

Description:
Initial script to determine the type of order jobs required to be processed and their contents.
The script also populates various required variables in dataservices in down the line processes
*/

using Biosero.DataServices.Client;
using Biosero.Orchestrator.WorkflowService;
using Newtonsoft.Json;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Roche.LAMA1;
using Roche.LAMA1.Models;
using Roche.LAMA1.MosaicTypes;
using Biosero.DataServices.RestClient;
using Biosero.DataModels.Events;
using Biosero.DataModels.Ordering;
using Biosero.DataModels.Clients;
using Biosero.DataModels.Resources;
using System.Security.Cryptography;
using System.Collections;
using System.Text.RegularExpressions;


namespace Biosero.Scripting
{

    public class CheckAllQueuedEBSources
    {
        public string EvaluateDouble(double value)
        {
            if (value >= 0.5)
            {
                return "Bravo";
            }
            else
            {
                return "Echo";
            }
        }
        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)
        {
            Console.WriteLine($"***********      START OF CHECKALLQUEUED ***************" + Environment.NewLine);
            //retrieve initial global variables values
            string RequestedOrder = context.GetGlobalVariableValue<string>("Input.OrderId");
            string CPSourcesForEB = context.GetGlobalVariableValue<string>("CPSourcesForEB");


            Console.WriteLine($"******CPSourcesForEB is here: {CPSourcesForEB} " + Environment.NewLine);


            string DestLabwareType = "";
            string EBOperationOne = "";
            string EBOperationTwo = "";
            string EBOperationThree = "";
            string EBOperationFour = "";
            string EBOperationFive = "";
            string SerialiseDestinationId = "";

            string FirstReplicationInstrument = "";
            bool SerialiseOperationRequired = false;


            string API_BASE_URL = "http://192.168.14.10:8105/api/v2.0/";
            IQueryClient _queryClient = new QueryClient(API_BASE_URL);
            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);
            IEventClient _eventClient = new EventClient(API_BASE_URL);

            IdentityHelper _identityHelper;

            List<string> AllDestinationsForOrder = new List<string>();
            List<string> QueuedDestinationsForOrder = new List<string>();
            List<string> ReadyDestinationsForEB = new List<string>();
            List<string> TransportedSourcesForEB = new List<string>();
            List<string> EBRequiredOperations = new List<string>();
            List<string> AllQueuedSources = new List<string>();


            //Add all required barcodes to a dedicated comma separated list
            List<string> CPToEBBarcodes = CPSourcesForEB.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();

            string EBSources = string.Join(",", CPToEBBarcodes);
            string initialReadyDestinations = "";// string.Join(",", ReadyDestinationsForEB);

            //Build out and register the root identities (i.e Mosaic Job) if they do not exist
            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);
            _identityHelper.BuildBaseIdentities();

            //Get all the sources associated with this order
            var sources = _identityHelper.GetSources(RequestedOrder).ToList();
            //Get all the Sources associated with this order
            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();
            //Get all the jobs
            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();

            //Loop through all destinations for the order
            foreach (var dest in destinations)
            {
                string DestID = dest.Identifier;
                string DestName = dest.Name;
                string DestType = dest.TypeIdentifier;
                string DestState = dest.Status.ToString();
                string DestOperationType = dest.OperationType.ToString();
                string DestSampleTransfers = dest.SampleTransfers.ToString();


                bool isFirstOperation = string.IsNullOrWhiteSpace(dest.ParentIdentifier);
                //     string DestParentIdentifier = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : "No ParentIdentifier";

                //if the destination is top of the destination tree (so no parent identifier)
                if ((isFirstOperation) && (EBOperationOne == ""))
                {
                    EBOperationOne = DestOperationType;
                    //Add to list of EB operation if not Cherry Pick
                    if ((EBOperationOne != "CherryPick") && (EBOperationOne == "Replicate"))
                    {
                        string cleanedInputForReplicateOne = DestSampleTransfers.Trim();
                        // Convert the cleaned string to a double
                        double RepOneTransferVolume = double.Parse(cleanedInputForReplicateOne);

                        EBOperationOne = EvaluateDouble(RepOneTransferVolume);


                        Console.WriteLine($"***********  First Operation for the order: {EBOperationOne} " + Environment.NewLine);
                        EBRequiredOperations.Add(EBOperationOne);
                    }
                    else if ((EBOperationOne != "CherryPick") && (EBOperationOne != "Replicate"))
                    {
                        Console.WriteLine($"***********  First Operation for the order: {EBOperationOne} " + Environment.NewLine);
                        EBRequiredOperations.Add(EBOperationOne);
                    }

                    //Get the next destination plate after the cherry pick operation
                    var SecondDestination = destinations
                    .Where(x => x.ParentIdentifier == DestID)
                    .FirstOrDefault();

                    if ((SecondDestination != null) && (EBOperationTwo == ""))
                    {
                        string SecondDestID = SecondDestination.Identifier;
                        EBOperationTwo = SecondDestination.OperationType.ToString();
                        string SecondDestSampleTransfers = SecondDestination.SampleTransfers.ToString();

                        //Add to list of EB operation if not Cherry Pick
                        if ((EBOperationTwo != "CherryPick") && (EBOperationTwo == "Replicate"))
                        {
                            string cleanedInputForReplicateTwo = SecondDestSampleTransfers.Trim();
                            // Convert the cleaned string to a double
                            double RepTwoTransferVolume = double.Parse(cleanedInputForReplicateTwo);

                            EBOperationTwo = EvaluateDouble(RepTwoTransferVolume);

                            Console.WriteLine($"***********  Second Operation for the order: {EBOperationTwo} " + Environment.NewLine);
                            EBRequiredOperations.Add(EBOperationTwo);
                        }
                        else if (EBOperationTwo != "CherryPick")
                        {
                            Console.WriteLine($"***********  Second Operation for the order: {EBOperationTwo} " + Environment.NewLine);
                            EBRequiredOperations.Add(EBOperationTwo);
                        }

                        if (EBOperationTwo == "Serialise")
                        {
                             SerialiseDestinationId = SecondDestID;
                        }

                        //Get the next destination plate after the cherry pick operation
                        var ThirdDestination = destinations
                        .Where(x => x.ParentIdentifier == SerialiseDestinationId)
                        .FirstOrDefault();

                        if ((ThirdDestination != null) && (EBOperationThree == ""))
                        {
                            string ThirdDestID = ThirdDestination.Identifier;
                            EBOperationThree = ThirdDestination.OperationType.ToString();
                            string ThirdDestSampleTransfers = ThirdDestination.SampleTransfers.ToString();

                            //Add to list of EB operation if not Cherry Pick
                            if ((EBOperationThree != "CherryPick") && (EBOperationThree == "Replicate"))
                            {
                                string cleanedInputForReplicateThree = ThirdDestSampleTransfers.Trim();
                                // Convert the cleaned string to a double
                                double RepThreeTransferVolume = double.Parse(cleanedInputForReplicateThree);

                                EBOperationThree = EvaluateDouble(RepThreeTransferVolume);

                                Console.WriteLine($"***********  Third Operation for the order: {EBOperationThree} " + Environment.NewLine);
                                EBRequiredOperations.Add(EBOperationThree);
                            }
                            else if (EBOperationThree != "CherryPick")
                            {
                                Console.WriteLine($"***********  Third Operation for the order: {EBOperationThree} " + Environment.NewLine);
                                EBRequiredOperations.Add(EBOperationThree);
                            }

                            //Get the next destination plate after the cherry pick operation
                            var FourthDestination = destinations
                            .Where(x => x.ParentIdentifier == SerialiseDestinationId)
                            .FirstOrDefault();

                            if ((FourthDestination != null) && (EBOperationFour == ""))
                            {
                                string FourthDestID = FourthDestination.Identifier;
                                EBOperationFour = FourthDestination.OperationType.ToString();
                                string FourthDestSampleTransfers = FourthDestination.SampleTransfers.ToString();

                                //Add to list of EB operation if not Cherry Pick
                                if ((EBOperationFour != "CherryPick") && (EBOperationFour == "Replicate"))
                                {
                                    string cleanedInputForReplicateFour = FourthDestSampleTransfers.Trim();
                                    // Convert the cleaned string to a double
                                    double RepFourTransferVolume = double.Parse(cleanedInputForReplicateFour);

                                    EBOperationFour = EvaluateDouble(RepFourTransferVolume);

                                    Console.WriteLine($"***********  Fourth Operation for the order: {EBOperationFour} " + Environment.NewLine);
                                    EBRequiredOperations.Add(EBOperationFour);
                                }
                                else if (EBOperationFour != "CherryPick")
                                {
                                    Console.WriteLine($"***********  Fourth Operation for the order: {EBOperationFour} " + Environment.NewLine);
                                    EBRequiredOperations.Add(EBOperationFour);
                                }

                                //Get the next destination plate after the cherry pick operation
                                var FifthDestination = destinations
                                .Where(x => x.ParentIdentifier == SerialiseDestinationId)
                                .FirstOrDefault();

                                if ((FifthDestination != null) && (EBOperationFive == ""))
                                {
                                    string FifthDestID = FifthDestination.Identifier;
                                    EBOperationFive = FifthDestination.OperationType.ToString();
                                    string FifthDestSampleTransfers = FifthDestination.SampleTransfers.ToString();

                                    //Add to list of EB operation if not Cherry Pick
                                    if ((EBOperationFive != "CherryPick") && (EBOperationFive == "Replicate"))
                                    {
                                        string cleanedInputForReplicateFive = FifthDestSampleTransfers.Trim();
                                        // Convert the cleaned string to a double
                                        double RepiveTransferVolume = double.Parse(cleanedInputForReplicateFive);

                                        EBOperationFive = EvaluateDouble(RepiveTransferVolume);

                                        Console.WriteLine($"***********  Fifth Operation for the order: {EBOperationFive} " + Environment.NewLine);
                                        EBRequiredOperations.Add(EBOperationFive);
                                    }
                                    else if (EBOperationFive != "CherryPick")
                                    {
                                        Console.WriteLine($"***********  Fifth Operation for the order: {EBOperationFive} " + Environment.NewLine);
                                        EBRequiredOperations.Add(EBOperationFive);
                                    }
                                }
                            }
                        }
                    }

                }


                //Retrieve the transfer volume if replicate type
                if (DestOperationType == "Replicate")
                {
                    string cleanedInput = DestSampleTransfers.Trim();
                    // Convert the cleaned string to a double
                    double RepTransferVolume = double.Parse(cleanedInput);
                }

                //check if current plate is on EB
                bool isInList = CPToEBBarcodes.Contains(DestName);

                if (isInList)
                {
                    //Add plate to dedicated arrays if found
                    if (!AllDestinationsForOrder.Contains(DestName))
                    {
                        AllDestinationsForOrder.Add(DestName);
                        QueuedDestinationsForOrder.Add(DestName);
                        Serilog.Log.Information("### Adding {DestName} to QueuedDestinationsForOrder and AllDestinationsForOrder", DestName.ToString());
                    }

                    Serilog.Log.Information("Looking for any Finished plates for Order {RequestedOrder}", RequestedOrder.ToString());
                    Serilog.Log.Information("Current Plate Name  {DestName}", DestName.ToString());


                    //Get the source plate for the current destination plate name
                    var cc = sources
                    .Where(x => x.Name == DestName)
                    .FirstOrDefault();

                    string SameSourceName = cc.Name;
                    string SameSourceIdentifier = cc.Identifier;
                    //Get the status for the plate found on EB
                    string SameSourceStatus = cc.Status.ToString();


                    Serilog.Log.Information("Found a source with the same name {SameSource}", SameSourceName.ToString());


                    Console.WriteLine($"***********  Source barcode= {SameSourceName}, Source Id= {SameSourceIdentifier}, Source Status= {SameSourceStatus} " + Environment.NewLine);




                    //If plate not currently in the ReadyDestinationsForEB array and is either FINISHED or PENDING - 
                    if ((!ReadyDestinationsForEB.Contains(DestName)) && (DestState == "Finished") && (SameSourceStatus == "Pending"))
                    {
                        int SameSourceJobID = cc.JobId;
                        Console.WriteLine($"***********  CP destination plate {DestName} has finished - setting the child plate (source) to status of QUEUED " + Environment.NewLine);
                        // Serilog.Log.Information("Got One plate!= {DestName}", DestName.ToString());

                        ReadyDestinationsForEB.Add(DestName);

                        //    var currentStatus = SourceIndentityState;
                        cc.Properties.SetValue("Status", "Queued");
                        _identityHelper.Register(cc, SameSourceJobID, RequestedOrder);

                        //Add source to the list of queued sources
                        AllQueuedSources.Add(SameSourceName);



                        DestLabwareType = dest.CommonName.ToString();

                        Console.WriteLine($"***********       CheckAllQueuedEBSources: Adding Plate to ReadyDestinatonForEB array, total finished CP plates: {ReadyDestinationsForEB.Count} " + Environment.NewLine);
                    }
     

                }
            }

            //format EB operations list to a comma separated list
            string AllEBOperationsForOrder = string.Join(",", EBRequiredOperations);

            //format EB operations list to a comma separated list
        //    string AllQueuedPlatesFromCP = string.Join(",", AllQueuedSources);


            string FirstEBOperation = EBRequiredOperations[0];
            string EBWorkInitiates = "";

            if (FirstEBOperation == "Serialise" || FirstEBOperation == "Bravo")
            {
                EBWorkInitiates = "Bravo";
            }
            else if (FirstEBOperation == "Echo")
            {
                EBWorkInitiates = "Echo";
            }



            //Assign to Required EB work to global variable EBOrderWorkInitiates
            await context.AddOrUpdateGlobalVariableAsync("EBOrderWorkInitiates", EBWorkInitiates);
            await context.AddOrUpdateGlobalVariableAsync("Queued EB Plates Count", AllQueuedSources.Count);
          //  await context.AddOrUpdateGlobalVariableAsync("All queued EB plates", AllQueuedPlatesFromCP);

         //   Console.WriteLine($"*********** The sources set to queued from CP: {AllQueuedPlatesFromCP} " + Environment.NewLine);

            //Assign to Required EB work to global variable EBOrderWorkType
            await context.AddOrUpdateGlobalVariableAsync("EBOrderWorkType", AllEBOperationsForOrder);


            Console.WriteLine($"***********  This is the first instrument path needed for the order: {EBWorkInitiates} " + Environment.NewLine);
            Console.WriteLine($"***********  These are the required EB operations for the order: {AllEBOperationsForOrder} " + Environment.NewLine);

       //     Console.WriteLine($"***********  TOTAL QUEUED PLATES {AllQueuedSources.Count} " + Environment.NewLine);


            Serilog.Log.Information("List all the plates that are need in EB from  CP for order  {RequestedOrder}", RequestedOrder.ToString());

            // Formatall found plates array to a string
            string AllEBDestinedSources = string.Join(",", AllDestinationsForOrder);
            Console.WriteLine($"***********       CheckAllQueuedEBSources: These EB destination plates were found for EB: {AllEBDestinedSources} " + Environment.NewLine);

            //Count total EB based plates
            int TotalEBDestinedSources = AllDestinationsForOrder.Count;
            Console.WriteLine($"***********       CheckAllQueuedEBSources: A Total of {TotalEBDestinedSources} sources were found for the  EB workstation" + Environment.NewLine);


            string AllQueuedEBDestinedSources = string.Join(",", QueuedDestinationsForOrder);
            //    Console.WriteLine($"***********       CheckAllQueuedEBSources: These EB queued plates were found for EB = {AllQueuedEBDestinedSources} " + Environment.NewLine);


         //   int TotalEBQueuedDestinedSources = QueuedDestinationsForOrder.Count;
         //   Console.WriteLine($"***********       CheckAllQueuedEBSources: A Total of = {TotalEBQueuedDestinedSources} EB queued were found for the EB workstation" + Environment.NewLine);


            string AllEBReadySources = "";
            int TotalEBReadySources = 0;
            //  string AllEBTransportedSources = "";
            //  int TotalEBTransportedSources = 0;


            //If at least one plate on EB is rteady - Retrieve list of plates and count
            if (ReadyDestinationsForEB.Count() > 0)
            {
                AllEBReadySources = string.Join(",", ReadyDestinationsForEB);
                TotalEBReadySources = ReadyDestinationsForEB.Count;
            }
            else
            {
                AllEBReadySources = "";
                TotalEBReadySources = 0;
            }
            Console.WriteLine($"***********       These plates are ready {AllEBReadySources} to be sent to EB" + Environment.NewLine);
            Console.WriteLine($"***********        A Total of = {TotalEBReadySources} plate were ready to be sent to the  EB workstation" + Environment.NewLine);


         //   await context.AddOrUpdateGlobalVariableAsync("TotalEBQueuedDestinedSources", TotalEBQueuedDestinedSources);
            await context.AddOrUpdateGlobalVariableAsync("EBSourcesToBeTransferred", AllEBReadySources);
            await context.AddOrUpdateGlobalVariableAsync("TotalEBReadySources", TotalEBReadySources);
            await context.AddOrUpdateGlobalVariableAsync("EBRempSourceLabwareType", DestLabwareType);


            Console.WriteLine($"******EBOrderWorkInitiates is here: {EBWorkInitiates} " + Environment.NewLine);
          //  Console.WriteLine($"******Queued EB Plates Count is here: {AllQueuedSources.Count} " + Environment.NewLine);
          //  Console.WriteLine($"******All queued EB plates: {AllQueuedPlatesFromCP} " + Environment.NewLine);
            Console.WriteLine($"******EBOrderWorkType: {AllEBOperationsForOrder} " + Environment.NewLine);
           // Console.WriteLine($"******TotalEBQueuedDestinedSources is here: {TotalEBQueuedDestinedSources} " + Environment.NewLine);
            Console.WriteLine($"******EBSourcesToBeTransferred is here: {AllEBReadySources} " + Environment.NewLine);
            Console.WriteLine($"******TotalEBReadySources is here: {TotalEBReadySources} " + Environment.NewLine);
            Console.WriteLine($"******EBRempSourceLabwareType is here: {DestLabwareType} " + Environment.NewLine);

        }

    }
}
