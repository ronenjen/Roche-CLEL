#r Roche.LAMA1.dll

using Biosero.DataServices.Client;
using Biosero.Orchestrator.WorkflowService;
using Newtonsoft.Json;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Roche.LAMA1;
using Roche.LAMA1.Models;
using Roche.LAMA1.MosaicTypes;
using Biosero.DataServices.RestClient;
using Biosero.DataModels.Events;
using Biosero.DataModels.Ordering;
using Biosero.DataModels.Clients;
using Biosero.DataModels.Resources;
using System.Security.Cryptography;
using System.Collections;


namespace Biosero.Scripting
{
    public class GetQueuedPlateToProcess
    {


        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)
        {
            Console.WriteLine($"***********       Processing of GetQueuedPlateToProcess begins **********" + Environment.NewLine);
            //Retrieve current global variables value
            string RequestedOrder = context.GetGlobalVariableValue<string>("Input.OrderId");
            string EBSourcesToBeTransferred = context.GetGlobalVariableValue<string>("EBSourcesToBeTransferred");
            string EBWorkRequired = context.GetGlobalVariableValue<string>("EBOrderWorkType");


            string API_BASE_URL = "http://192.168.14.10:8105/api/v2.0/";

            IQueryClient _queryClient = new QueryClient(API_BASE_URL);
            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);
            IEventClient _eventClient = new EventClient(API_BASE_URL);


            IdentityHelper _identityHelper;


            //Build out and register the root identities (i.e Mosaic Job) if they do not exist
            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);
            _identityHelper.BuildBaseIdentities();

            var sources = _identityHelper.GetSources(RequestedOrder).ToList();

            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();

            //Format list of transferred sources to an array
            string[] QueuedEBSourcesArray = EBSourcesToBeTransferred.Split(',');


            string firstPlate = QueuedEBSourcesArray[0];

            string updatedQueuedEBSourcesArray = string.Join(",", QueuedEBSourcesArray, 1, QueuedEBSourcesArray.Length - 1);

            // Convert the array to a List
            List<string> EBSourcesList = new List<string>(QueuedEBSourcesArray);


            var aa = sources
            .Where(a => a.Name == firstPlate)
            .FirstOrDefault();

            //Find the source name and priority for each ready plate
            string SourceName = aa.Name;
            string SourcePriority = aa.Priority;
            int SourceJobId = aa.JobId;
            string SourceIdentifier = aa.Identifier;
            string SourceOperation = aa.OperationType.ToString();

            //this is the parent destination for the current source
            string SourceParentIdentifier = aa.ParentIdentifier;


            var cc = destinations
            .Where(x => x.Identifier == SourceParentIdentifier)
            .FirstOrDefault();


            string DestId = cc.Name; 
            int DestJobId = cc.JobId;
            string DestName = cc.Name;
            string DestOperation = cc.OperationType.ToString();
            //reset statuses
            //set cp destination status to "Completed"


            var bb = destinations
            .Where(a => a.SiblingIdentifier == SourceIdentifier)
            .FirstOrDefault();


            string NewDestinationName = bb.Name;
            string NewDestinationId = bb.Identifier;
            string NewDestinationOperation = bb.OperationType.ToString();


            cc.Properties.SetValue("Status", "Completed");
            _identityHelper.Register(cc, DestJobId, RequestedOrder);
            Console.WriteLine($"*********** source  plate  {DestName} with ID {DestId} and operation {DestOperation} status was set to Completed " + Environment.NewLine);

            //set serialisation source status to "Transporting"

            aa.Properties.SetValue("Status", "Transporting");
            _identityHelper.Register(aa, SourceJobId, RequestedOrder);
            Console.WriteLine($"*********** source  plate  {SourceName} with Id {SourceIdentifier} and operation {SourceOperation} status was set to Transporting " + Environment.NewLine);

            bb.Properties.SetValue("Status", "Transporting");
            _identityHelper.Register(bb, SourceJobId, RequestedOrder);
            Console.WriteLine($"*********** destination  plate  {NewDestinationName} with Id {NewDestinationId} and operation {NewDestinationOperation} status was set to Transporting " + Environment.NewLine);



            await context.AddOrUpdateGlobalVariableAsync("CurrentSourcePlate", SourceName);

            string updatedEBSourceList = string.Join(",", QueuedEBSourcesArray, 1, QueuedEBSourcesArray.Length - 1);

            await context.AddOrUpdateGlobalVariableAsync("Queued EB Plates Count", QueuedEBSourcesArray.Length - 1);
            await context.AddOrUpdateGlobalVariableAsync("All queued EB plates", updatedEBSourceList);
            await context.AddOrUpdateGlobalVariableAsync("Work Required For Current EB Plate", EBWorkRequired);


            Console.WriteLine($"***********   Current source plate  {SourceName} " + Environment.NewLine);
            Console.WriteLine($"***********   New total EB Plates is (Queued EB Plates Count) {QueuedEBSourcesArray.Length - 1} " + Environment.NewLine);
            Console.WriteLine($"***********   New list of EB Plates (All queued EB plates) {updatedEBSourceList} " + Environment.NewLine);
            Console.WriteLine($"***********   Work Required For Current EB Plate  {EBWorkRequired} " + Environment.NewLine);


        }
    }
}


