#r Roche.LAMA1.dll


/*
Script written by Ronen Peleg (ronenpeleg@biosero.com)

Description:
Initial script to determine the type of order jobs required to be processed and their contents.
The script also populates various required variables in dataservices in down the line processes
*/




using Biosero.DataServices.Client;
using Biosero.Orchestrator.WorkflowService;
using Newtonsoft.Json;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Roche.LAMA1;
using Roche.LAMA1.Models;
using Roche.LAMA1.MosaicTypes;
using Biosero.DataServices.RestClient;
using Biosero.DataModels.Events;
using Biosero.DataModels.Ordering;
using Biosero.DataModels.Clients;
using Biosero.DataModels.Resources;
using System.Security.Cryptography;
using System.Collections;


namespace Biosero.Scripting
{
    public class Process_State_Machine_Input
    {
        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)
        {

            // Boolean variable determining if the first workflow should process Racks or Crash plates. Both set to FALSE initially.
            // it is not expected for a job to have bothrequired
            await context.AddOrUpdateGlobalVariableAsync("IOC Racks Required", false);
            await context.AddOrUpdateGlobalVariableAsync("IOC Crash Plates Required", false);

            // Retrieve order ID ran
            string RequestedOrder = context.GetGlobalVariableValue<string>("Input.OrderId");


            // connnect to the DS server, declare query, assecssioning and event clients for the URL
            string API_BASE_URL = "http://192.168.14.10:8105/api/v2.0/";
            IQueryClient _queryClient = new QueryClient(API_BASE_URL);
            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);
            IEventClient _eventClient = new EventClient(API_BASE_URL);

            IdentityHelper _identityHelper;

            //Build out and register the root identities (i.e Mosaic Job) if they do not exist
            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);
            _identityHelper.BuildBaseIdentities();


            //Get all the sources associated with this order
            var sources = _identityHelper.GetSources(RequestedOrder).ToList();

            //Get all the destinations associated with this order
            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();
            //Get all the jobs for the requested order
            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();



            // Various lists used throughout processing to collect related data for the order and job
            List<string> AllSourcesForOrder = new List<string>();
            List<string> QueuedSourcesForOrder = new List<string>();
            List<string> AllJobsForOrder = new List<string>();
            List<string> AllCrashJobsForOrder = new List<string>();
            List<string> AllCrashPlatesForOrder = new List<string>();
            List<string> QueuedCrashPlatesForOrder = new List<string>();
            List<string> AllLabwareForForOrder = new List<string>();
            List<string> LabwareTypesForOrder = new List<string>();


            //Loop through all destination identities for the order
            foreach (var dest in destinations)
            {
                string DestinationName = dest.Name;
                string DestinationDescription = dest.Description;
                string DestinationSampleTransfers = dest.SampleTransfers;
                string DestinationOperationType = dest.OperationType.ToString();
                string DestinationJobId = dest.JobId.ToString();
                string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;
                string DestinationSiblingIdentifier = dest.SiblingIdentifier?.ToString() ?? "";
                string DestinationLabwareType = dest.CommonName.ToString();

                /*
                if (dest.ParentIdentifier != null)
                {
                    DestinationParent = dest.ParentIdentifier.ToString();
                }
                else
                {
                    DestinationParent = "";
                }
                */


                // if not member already - add to a list of all labware types for the order
                if (!LabwareTypesForOrder.Contains(DestinationLabwareType))
                {
                    LabwareTypesForOrder.Add(DestinationLabwareType);
                }


                // If the destination operation is CherryPick, we know that IOC REMP work is required and so process accordingly
                if (DestinationOperationType == "CherryPick")
                {
                    // Determing the current JobId
                    var i = jobs
                    .Where(x => x.Properties.GetValue<string>("JobId") == DestinationJobId)
                    .FirstOrDefault();

                    //Determing the current Job Name
                    string DestJobName = i.Name;



                    string DestReplicateJobName = i.Name;

                    if (DestinationSiblingIdentifier != "")
                    {

                        //Determine source identifier and CrashPlateName of the destination sibling
                        var cc = sources
                        .Where(x => x.Identifier == DestinationSiblingIdentifier)
                        .FirstOrDefault();

                        string REMPRackName = cc.Name;
                        Serilog.Log.Information("Job Id {DestinationSiblingIdentifier} - REMPRackName= {REMPRackName}", REMPRackName.ToString(), DestinationSiblingIdentifier.ToString());
                    }



                    // Add a unique job record to list of cherry pick jobs (if is not already present)
                    if (!AllJobsForOrder.Contains(DestJobName))
                    {
                        AllJobsForOrder.Add(DestJobName);
                    }


                    //////////
                    /// use the DestinationSampleTransfers to determine all required sources for the destination. 
                    /// Add to alist of all sources and another list of all queued sources.
                    /// Lists will be used to compare job required vs work done....
                    /// /////////////

                    string[] lines = DestinationSampleTransfers.Split(new[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);

                    var firstValues = lines.Select(line => line.Split(',')[0]);

                    foreach (var value in firstValues)
                    {

                        // if not member already - add to a list of all sources for the order
                        if (!AllSourcesForOrder.Contains(value))
                        {
                            AllSourcesForOrder.Add(value);
                            QueuedSourcesForOrder.Add(value);
                        }
                    }

                }

                // If the destination operation is Replicate, we know that IOC Crash Plate work is required and so process accordingly
                if ((DestinationOperationType == "Replicate") && (DestinationParent == ""))
                {
                    // Determing jobID and Job Name
                    var ii = jobs
                    .Where(x => x.Properties.GetValue<string>("JobId") == DestinationJobId)
                    .FirstOrDefault();

                    string DestReplicateJobName = ii.Name;

                    //Determine source identifier and CrashPlateName of the destination sibling
                    var c = sources
                    .Where(x => x.Identifier == DestinationSiblingIdentifier)
                    .FirstOrDefault();

                    string CrashPlateName = c.Name;

                    Serilog.Log.Information("Job Id {DestinationSiblingIdentifier} - CrashPlateName= {CrashPlateName}", CrashPlateName.ToString(), DestinationSiblingIdentifier.ToString());

                    // Add a unique job record to list of crash plate jobs 
                    if (!AllCrashJobsForOrder.Contains(DestReplicateJobName))
                    {
                        AllCrashJobsForOrder.Add(DestReplicateJobName);
                    }

                    //////////
                    /// use the DestinationSampleTransfers to determine all required sources for the destination. 
                    /// Add to alist of all sources and another list of all queued sources.
                    /// Lists will be used to compare job required vs work done....
                    /// /////////////

                    string[] Crashlines = DestinationSampleTransfers.Split(new[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);

                    var CrashfirstValues = Crashlines.Select(line => line.Split(',')[0]);

                    foreach (var Crashvalue in CrashfirstValues)
                    {

                        // if not member already - add to a list of all crash sources for the order
                        if (!AllCrashPlatesForOrder.Contains(CrashPlateName))
                        {
                            AllCrashPlatesForOrder.Add(CrashPlateName);
                            QueuedCrashPlatesForOrder.Add(CrashPlateName);
                        }
                    }


                }

            }

            // Format a string version of all created lists
            string QueuedJobs = string.Join(",", AllJobsForOrder);
            string AllSources = string.Join(",", AllSourcesForOrder);
            string QueuedSources = string.Join(",", QueuedSourcesForOrder);
            string QueuedCrashJobs = string.Join(",", AllCrashJobsForOrder);
            string OrderLabwareTypes = string.Join(",", LabwareTypesForOrder);
            string AllCrashPlates = string.Join(",", AllCrashPlatesForOrder);
            string QueuedCrashPlates = string.Join(",", QueuedCrashPlatesForOrder);

            // Count members for each list and save to a variable
            int NumQueuedSources = QueuedSourcesForOrder.Count;
            int NumSources = AllSourcesForOrder.Count;
            int NumQueuedJobs = AllJobsForOrder.Count;
            int NumQueuedCrashJobs = AllCrashJobsForOrder.Count;
            int NumQueuedCrashPlates = QueuedCrashPlatesForOrder.Count;
            int NumCrashPlates = AllCrashPlatesForOrder.Count;


            // save required labware types list to the "Order Labware Types" dataservices variable
            await context.AddOrUpdateGlobalVariableAsync("Order Labware Types", OrderLabwareTypes);
            //add the list of sources needed to the DS variable "All Sources Queued for the order"
            await context.AddOrUpdateGlobalVariableAsync("All Sources Queued for the order", QueuedSources);
            // add the total of sources needed to the DS variable "Total Sources"
            await context.AddOrUpdateGlobalVariableAsync("Total Sources", NumSources);
            // add the total of queued jobs for the order to the DS variable "Total Queued Jobs"
            await context.AddOrUpdateGlobalVariableAsync("Total Queued Jobs", NumQueuedJobs);


            // if there is at least 1 queued source, we know that REMP work is required and so set the DS variable "IOC Racks Required" to TRUE
            if (NumQueuedSources > 0)
            {
                await context.AddOrUpdateGlobalVariableAsync("IOC Racks Required", true);
                await context.AddOrUpdateGlobalVariableAsync("Queued Sources", QueuedSources);
            }



            // if there is at least 1 queued crash plate, we know that Crash  work is required and so set the DS variable "IOC Crash Plates Required" to TRUE
            if (NumQueuedCrashPlates > 0)
            {
                await context.AddOrUpdateGlobalVariableAsync("IOC Crash Plates Required", true);
            }

            //Various logs showing the current state of processing
            Serilog.Log.Information("Total Sources Queued {NumQueuedSources}", NumQueuedSources.ToString());
            Serilog.Log.Information("The following Labware Types were found to be required: {OrderLabwareTypes}", OrderLabwareTypes.ToString());
            Serilog.Log.Information("All sources for the order= {QueuedSources}", QueuedSources.ToString());
            Serilog.Log.Information("Total sources for the order= {NumSources}, total queued {NumQueuedSources}", NumSources.ToString(), NumQueuedSources.ToString());
            Serilog.Log.Information("All Queued Jobs= {QueuedJobs}", QueuedJobs.ToString());
            Serilog.Log.Information("Total Queued Jobs For The Order= {xx}", NumQueuedJobs.ToString());



            Serilog.Log.Information("All crash plates for the order= {AllCrashPlates}", AllCrashPlates.ToString());
            Serilog.Log.Information("All Queued crash plates for the order= {zz}", QueuedCrashJobs.ToString());
            Serilog.Log.Information("Total crash plates for the order= {yy}", NumCrashPlates.ToString());
            Serilog.Log.Information("Total queued crash plates for the order= {xx}", NumQueuedCrashJobs.ToString());



            // add the list of crash plates for the order to the DS variable "Queued Crash Plates"
            await context.AddOrUpdateGlobalVariableAsync("Queued Crash Plates", QueuedCrashPlates);
            // add the total of crash plates for the order to the DS variable "Total Crah Plates"
            await context.AddOrUpdateGlobalVariableAsync("Total Crah Plates", NumCrashPlates);
            // add the total of crash jobs for the order to the DS variable "Total Crah Plates"
            await context.AddOrUpdateGlobalVariableAsync("Total Queued Crash Jobs", NumQueuedCrashJobs);


        }

    }
}


