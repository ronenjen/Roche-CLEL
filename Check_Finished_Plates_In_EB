#r Roche.LAMA1.dll


/*
Script written by Ronen Peleg (ronenpeleg@biosero.com)

Description:
Initial script to determine the type of order jobs required to be processed and their contents.
The script also populates various required variables in dataservices in down the line processes
*/




using Biosero.DataServices.Client;
using Biosero.Orchestrator.WorkflowService;
using Newtonsoft.Json;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Roche.LAMA1;
using Roche.LAMA1.Models;
using Roche.LAMA1.MosaicTypes;
using Biosero.DataServices.RestClient;
using Biosero.DataModels.Events;
using Biosero.DataModels.Ordering;
using Biosero.DataModels.Clients;
using Biosero.DataModels.Resources;
using System.Security.Cryptography;
using System.Collections;
using System.Numerics;


namespace Biosero.Scripting
{
    public class Check_Finished_Plates_In_EB
    {
        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)
        {

            string RequestedOrder = context.GetGlobalVariableValue<string>("Input.OrderId");

            string FinishedDestinationPlatesForIOC = "";
            string FinishedSourcePlatesForIOC = "";



            // connnect to the DS server, declare query, assecssioning and event clients for the URL
            string API_BASE_URL = "http://192.168.14.10:8105/api/v2.0/";
            IQueryClient _queryClient = new QueryClient(API_BASE_URL);
            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);
            IEventClient _eventClient = new EventClient(API_BASE_URL);

            IdentityHelper _identityHelper;

            //Build out and register the root identities (i.e Mosaic Job) if they do not exist
            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);
            _identityHelper.BuildBaseIdentities();

            //Get all the sources associated with this order
            var sources = _identityHelper.GetSources(RequestedOrder).ToList();
            //Get all the Sources associated with this order
            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();
            //Get all the jobs
            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();



            List<string> AllDestinationPlates = new List<string>();
            List<string> AllCompletedDestinationPlates = new List<string>();
            List<string> AllSourcePlates = new List<string>();
            List<string> AllCompletedSourcePlates = new List<string>();

            int TotalDestinationPlates = 0;
            int TotalCompletedDestinationPlates = 0;
            int TotalSourcePlates = 0;
            int TotalCompletedSourcePlates = 0;

            foreach (var destination in destinations)
            {

                // Each dest should be set to pending, queued, validating, ready
                // compare the list of non completed dest to the list of all plates - if different set Destination EB Plates Not Finished to True
                string DestName = destination.Name;
                string DestStatus = destination.Status.ToString();
                string DestId = destination.Identifier.ToString();


                if (!AllDestinationPlates.Contains(DestName))
                {
                    AllDestinationPlates.Add(DestName);
                }

                if (DestStatus == "Completed")
                {

                    var b = sources
                    .Where(x => x.ParentIdentifier == DestId)
                    .FirstOrDefault();

                    if (b == null)
                    {
                        if (!AllCompletedDestinationPlates.Contains(DestName))
                        {
                            AllCompletedDestinationPlates.Add(DestName);
                        }



                        // Check if the string is not empty before adding a comma
                        if (!string.IsNullOrEmpty(FinishedDestinationPlatesForIOC))
                        {
                            FinishedDestinationPlatesForIOC += ", ";
                        }

                        // Add the current plate to the string
                        FinishedDestinationPlatesForIOC += DestName;
                    }

                }
            }


            TotalDestinationPlates = AllDestinationPlates.Count();
            TotalCompletedDestinationPlates = AllCompletedDestinationPlates.Count();

            if (TotalCompletedDestinationPlates != TotalDestinationPlates)
            {
                await context.AddOrUpdateGlobalVariableAsync("Destination EB Plates Not Finished", true);
            }
            


            await context.AddOrUpdateGlobalVariableAsync("Finished EB Destination Plates", FinishedDestinationPlatesForIOC);


            string SDestinationsList = String.Join(", ", AllDestinationPlates);


            Console.WriteLine($" Destination plates  {SDestinationsList} need returning to the IOC " + Environment.NewLine);
            Console.WriteLine($" Destination plates  {FinishedDestinationPlatesForIOC} were set to finished in the list " + Environment.NewLine);

            foreach (var source in sources)
            {
                // Each source should be set to pending, queued, validating, ready
                // compare the list of non completed sources to the list of all source plates - if different set Source EB Plates Not Finished to True

                string SourceName = source.Name;
                string SourceStatus = source.Status.ToString();
                string SourceId = source.Identifier.ToString();


                if (!AllSourcePlates.Contains(SourceName))
                {
                    AllSourcePlates.Add(SourceName);
                }


                if (SourceStatus == "Completed") 
                {


                    var a = destinations
                    .Where(x => x.SiblingIdentifier == SourceId)
                    .FirstOrDefault();

                    string DestStatus2 = a.Status.ToString();
                    string DestId2 = a.Identifier.ToString();


                    if (DestStatus2 == "Completed")
                    {
                        var c = sources
                        .Where(x => x.ParentIdentifier == DestId2)
                        .FirstOrDefault();

                        if (c == null)
                        {
                            if (!AllCompletedSourcePlates.Contains(SourceName))
                            {
                                AllCompletedSourcePlates.Add(SourceName);
                            }

                            // Check if the string is not empty before adding a comma
                            if (!string.IsNullOrEmpty(FinishedSourcePlatesForIOC))
                            {
                                FinishedSourcePlatesForIOC += ", ";
                            }

                            // Add the current plate to the string
                            FinishedSourcePlatesForIOC += SourceName;
                        }
                    }

                    

                }
            }


            TotalSourcePlates = AllSourcePlates.Count();
            TotalCompletedSourcePlates = AllCompletedSourcePlates.Count();

            if (TotalCompletedSourcePlates != TotalSourcePlates)
            {
                await context.AddOrUpdateGlobalVariableAsync("Source EB Plates Not Finished", true);
            }

            await context.AddOrUpdateGlobalVariableAsync("Finished EB Source Plates", FinishedSourcePlatesForIOC);


            string SourcesList = String.Join(", ", AllSourcePlates);


            Console.WriteLine($" Source plates  {SourcesList} need returning to the IOC " + Environment.NewLine);
            Console.WriteLine($" Source plates  {FinishedSourcePlatesForIOC} were set to finished in the list " + Environment.NewLine);

        }
    }
}


